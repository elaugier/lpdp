{
  "openapi" : "3.0.2",
  "info" : {
    "title" : "API for \"La Passion des poèmes\" website",
    "description" : "API of website La Passion des poèmes",
    "contact" : {
      "name" : "eGenGuru LPDP team",
      "url" : "https://egen.guru",
      "email" : "teamLPDP@egen.guru"
    },
    "license" : {
      "name" : "GNU GPLv3",
      "url" : "https://www.gnu.org/licenses/gpl.txt"
    },
    "version" : "1.0.0"
  },
  "paths" : {
    "/users" : {
      "summary" : "Path used to manage the list of Users.",
      "description" : "The REST endpoint/path used to list and create zero or more `User` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "get" : {
        "tags" : [ "User" ],
        "summary" : "List All Users",
        "description" : "Gets a list of all `User` entities.",
        "operationId" : "getUsers",
        "parameters" : [ {
          "name" : "filter",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "order",
          "in" : "query",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `User` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Create a User",
        "description" : "Creates a new instance of a `User`.",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "A new `User` to be created.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        }
      }
    },
    "/users/{userId}" : {
      "summary" : "Path used to manage a single User.",
      "description" : "The REST endpoint/path used to get, update, and delete single instances of an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Get a User",
        "description" : "Gets the details of a single instance of a `User`.",
        "operationId" : "getUser",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `User`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "User" ],
        "summary" : "Update a User",
        "description" : "Updates an existing `User`.",
        "operationId" : "updateUser",
        "requestBody" : {
          "description" : "Updated `User` information.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Successful response."
          }
        }
      },
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Delete a User",
        "description" : "Deletes an existing `User`.",
        "operationId" : "deleteUser",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          }
        }
      },
      "parameters" : [ {
        "name" : "userId",
        "in" : "path",
        "description" : "A unique identifier for a `User`.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/achievements" : {
      "summary" : "Path used to manage the list of Achievements.",
      "description" : "The REST endpoint/path used to list and create zero or more `Achievement` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "get" : {
        "tags" : [ "Achievement" ],
        "summary" : "List All Achievements",
        "description" : "Gets a list of all `Achievement` entities.",
        "operationId" : "getAchievements",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `Achievement` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Achievement"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Achievement" ],
        "summary" : "Create a Achievement",
        "description" : "Creates a new instance of a `Achievement`.",
        "operationId" : "createAchievement",
        "requestBody" : {
          "description" : "A new `Achievement` to be created.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Achievement"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/achievements/{achievementId}" : {
      "summary" : "Path used to manage a single Achievement.",
      "description" : "The REST endpoint/path used to get, update, and delete single instances of an `Achievement`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get" : {
        "tags" : [ "Achievement" ],
        "summary" : "Get a Achievement",
        "description" : "Gets the details of a single instance of a `Achievement`.",
        "operationId" : "getAchievement",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `Achievement`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Achievement"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Achievement" ],
        "summary" : "Update a Achievement",
        "description" : "Updates an existing `Achievement`.",
        "operationId" : "updateAchievement",
        "requestBody" : {
          "description" : "Updated `Achievement` information.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Achievement"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Successful response."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Achievement" ],
        "summary" : "Delete a Achievement",
        "description" : "Deletes an existing `Achievement`.",
        "operationId" : "deleteAchievement",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "parameters" : [ {
        "name" : "achievementId",
        "in" : "path",
        "description" : "A unique identifier for a `Achievement`.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/activities" : {
      "summary" : "Path used to manage the list of Activities.",
      "description" : "The REST endpoint/path used to list and create zero or more `Activity` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "get" : {
        "tags" : [ "Activity" ],
        "summary" : "List All Activities",
        "description" : "Gets a list of all `Activity` entities.",
        "operationId" : "getActivities",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `Activity` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Activity"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Activity" ],
        "summary" : "Create a Activity",
        "description" : "Creates a new instance of a `Activity`.",
        "operationId" : "createActivity",
        "requestBody" : {
          "description" : "A new `Activity` to be created.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Activity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        }
      }
    },
    "/activities/{activityId}" : {
      "summary" : "Path used to manage a single Activity.",
      "description" : "The REST endpoint/path used to get, update, and delete single instances of an `Activity`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get" : {
        "tags" : [ "Activity" ],
        "summary" : "Get a Activity",
        "description" : "Gets the details of a single instance of a `Activity`.",
        "operationId" : "getActivity",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `Activity`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Activity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Activity" ],
        "summary" : "Update a Activity",
        "description" : "Updates an existing `Activity`.",
        "operationId" : "updateActivity",
        "requestBody" : {
          "description" : "Updated `Activity` information.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Activity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Successful response."
          }
        }
      },
      "delete" : {
        "tags" : [ "Activity" ],
        "summary" : "Delete a Activity",
        "description" : "Deletes an existing `Activity`.",
        "operationId" : "deleteActivity",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          }
        }
      },
      "parameters" : [ {
        "name" : "activityId",
        "in" : "path",
        "description" : "A unique identifier for a `Activity`.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/tags" : {
      "summary" : "Path used to manage the list of tags.",
      "description" : "The REST endpoint/path used to list and create zero or more `tag` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "get" : {
        "tags" : [ "Tag" ],
        "summary" : "List All tags",
        "description" : "Gets a list of all `tag` entities.",
        "operationId" : "gettags",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `tag` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Tag"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Tag" ],
        "summary" : "Create a tag",
        "description" : "Creates a new instance of a `tag`.",
        "operationId" : "createtag",
        "requestBody" : {
          "description" : "A new `tag` to be created.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Tag"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        }
      }
    },
    "/tags/{tagId}" : {
      "summary" : "Path used to manage a single tag.",
      "description" : "The REST endpoint/path used to get, update, and delete single instances of an `tag`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get" : {
        "tags" : [ "Tag" ],
        "summary" : "Get a tag",
        "description" : "Gets the details of a single instance of a `tag`.",
        "operationId" : "gettag",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `tag`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Tag"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Tag" ],
        "summary" : "Update a tag",
        "description" : "Updates an existing `tag`.",
        "operationId" : "updatetag",
        "requestBody" : {
          "description" : "Updated `tag` information.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Tag"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Successful response."
          }
        }
      },
      "delete" : {
        "tags" : [ "Tag" ],
        "summary" : "Delete a tag",
        "description" : "Deletes an existing `tag`.",
        "operationId" : "deletetag",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          }
        }
      },
      "parameters" : [ {
        "name" : "tagId",
        "in" : "path",
        "description" : "A unique identifier for a `tag`.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    },
    "/alert" : {
      "summary" : "Path used to manage the list of Alert{S.",
      "description" : "The REST endpoint/path used to list and create zero or more `Alert{` entities.  This path contains a `GET` and `POST` operation to perform the list and create tasks, respectively.",
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "List All Alert{S",
        "description" : "Gets a list of all `Alert{` entities.",
        "operationId" : "getAlert{S",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns an array of `Alert{` entities.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Alert"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Alert" ],
        "summary" : "Create a Alert{",
        "description" : "Creates a new instance of a `Alert{`.",
        "operationId" : "createAlert{",
        "requestBody" : {
          "description" : "A new `Alert{` to be created.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Alert"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successful response."
          }
        }
      }
    },
    "/alert/{alertId}" : {
      "summary" : "Path used to manage a single Alert.",
      "description" : "The REST endpoint/path used to get, update, and delete single instances of an `Alert`.  This path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks, respectively.",
      "get" : {
        "tags" : [ "Alert" ],
        "summary" : "Get a Alert",
        "description" : "Gets the details of a single instance of a `Alert`.",
        "operationId" : "getAlert",
        "responses" : {
          "200" : {
            "description" : "Successful response - returns a single `Alert`.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Alert"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Alert" ],
        "summary" : "Update a Alert",
        "description" : "Updates an existing `Alert`.",
        "operationId" : "updateAlert",
        "requestBody" : {
          "description" : "Updated `Alert` information.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Alert"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Successful response."
          }
        }
      },
      "delete" : {
        "tags" : [ "Alert" ],
        "summary" : "Delete a Alert",
        "description" : "Deletes an existing `Alert`.",
        "operationId" : "deleteAlert",
        "responses" : {
          "204" : {
            "description" : "Successful response."
          }
        }
      },
      "parameters" : [ {
        "name" : "alertId",
        "in" : "path",
        "description" : "A unique identifier for a `Alert`.",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ]
    }
  },
  "components" : {
    "schemas" : {
      "User" : {
        "title" : "Root Type for User",
        "description" : "The root of the User type's schema.",
        "required" : [ "uuid" ],
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "created_at" : {
            "type" : "string"
          },
          "updated_at" : {
            "format" : "date-time",
            "type" : "string"
          }
        },
        "example" : "{\n    \"uuid\": \"string\",\n    \"created_at\": \"timestamp\",\n    \"updated_at\": \"timestamp\"\n}"
      },
      "Achievement" : {
        "title" : "Root Type for Achievement",
        "description" : "The root of the Achievement type's schema.",
        "required" : [ "id", "created_at", "owner_ref", "title" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "created_at" : {
            "format" : "date-time",
            "type" : "string"
          },
          "update_at" : {
            "format" : "date-time",
            "type" : "string"
          },
          "remove_at" : {
            "format" : "date-time",
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "owner_ref" : {
            "type" : "string"
          }
        },
        "example" : "{\n    \"id\":\"1dfb5823-0cd3-4b3a-a266-bb8b0ed2cd9d\",\n    \"created_at\":\"2018-10-27T04:39:43Z\",\n    \"updated_at\":\"2018-10-27T04:45:43Z\",\n    \"deleted_at\":\"2018-10-27T05:56:56Z\",\n    \"title\":\"vainqueur des Poèmes de l'année 2089\",\n    \"owner_ref\": \"0f2d353b-9dc4-4616-baf4-b84e57403960\"\n}"
      },
      "Activity" : {
        "title" : "Root Type for Activity",
        "description" : "The root of the Activity type's schema.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "created_at" : {
            "type" : "string"
          },
          "update_at" : {
            "type" : "string"
          },
          "remove_at" : {
            "type" : "string"
          },
          "message" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "owner_ref" : {
            "type" : "string"
          }
        },
        "example" : "{\n    \"id\": \"string\",\n    \"created_at\": \"string\",\n    \"update_at\": \"string\",\n    \"remove_at\": \"string\",\n    \"message\": \"string\",\n    \"type\": \"string\",\n    \"owner_ref\": \"string\"\n}"
      },
      "Alert" : {
        "title" : "Root Type for Alert{",
        "description" : "The root of the Alert{ type's schema.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "created_at" : {
            "format" : "date-time",
            "type" : "string"
          },
          "updated_at" : {
            "format" : "date-time",
            "type" : "string"
          },
          "deleted_at" : {
            "format" : "date-time",
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "details" : {
            "type" : "string"
          }
        },
        "example" : "{\n    \"id\":\"1dfb5823-0cd3-4b3a-a266-bb8b0ed2cd9d\",\n    \"created_at\":\"2018-10-27T04:39:43Z\",\n    \"updated_at\":\"2018-10-27T04:45:43Z\",\n    \"deleted_at\":\"2018-10-27T05:56:56Z\",\n    \"type\":\"plagiat\",\n    \"details\":\"plagiat d'une chanson de Brel\",\n    \"user_ref\": \"0f2d353b-9dc4-4616-baf4-b84e57403960\"\n}"
      },
      "Tag" : {
        "title" : "Root Type for tag",
        "description" : "The root of the tag type's schema.",
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "label" : {
            "type" : "string"
          },
          "enabled" : {
            "type" : "string"
          },
          "start_at" : {
            "type" : "string"
          },
          "closed_at" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string"
          },
          "mature" : {
            "type" : "string"
          }
        },
        "example" : "{\n    \"id\": \"string\",\n    \"code\": \"string\",\n    \"label\": \"string\",\n    \"enabled\": \"boolean\",\n    \"start_at\": \"string\",\n    \"closed_at\": \"string\",\n    \"type\": \"string\",\n    \"mature\": \"boolean\"\n}"
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer"
      }
    }
  },
  "tags" : [ {
    "name" : "User",
    "description" : ""
  }, {
    "name" : "Tag",
    "description" : ""
  }, {
    "name" : "Achievement",
    "description" : ""
  }, {
    "name" : "Activity",
    "description" : ""
  }, {
    "name" : "Alert",
    "description" : ""
  } ]
}